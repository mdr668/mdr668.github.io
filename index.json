[{"categories":null,"content":"lldbtrace链接 https://github.com/yangyss/lldb-trace ","date":"2022-01-02","objectID":"/%E4%BD%BF%E7%94%A8-lldbtrace-%E8%BF%98%E5%8E%9F%E7%AE%97%E6%B3%95/:0:0","tags":null,"title":"使用 LLDBTrace 还原算法","uri":"/%E4%BD%BF%E7%94%A8-lldbtrace-%E8%BF%98%E5%8E%9F%E7%AE%97%E6%B3%95/"},{"categories":null,"content":"首先利用 lldbtrace 处理一个BUG 有个经过 VMP 加固的结果一直不符合预期,大概定位一下位置 memset(dest,0,0x10000); ByteToHexStr(dvChr,dest,dvChrLen); printf(\"进入前:%s\\n\",dest); byteTurn(dvChr, dvChrLen, 0x5);//字节翻转加密 memset(dest2,0,0x10000); ByteToHexStr(dvChr,dest,dvChrLen); printf(\"进入后:%s\\n\",dest); byteTurn函数的功能是对字节分别进行翻转,并加上一个值 //字节按位翻转 并加减随机值 void byteTurn(uint8_t *lpBuf,int lpLen,int seed){ for (int i = 0; i \u003c lpLen; i++) { uint8_t byte= lpBuf[i]; lpBuf[i] = (((byte \u003c\u003c 4) | (byte \u003e\u003e 4)) + seed) \u0026 0xff; } } 在 byteTurn 函数前后分别打印 进入前: 06 9c e7 0e 9c a6 d1 6d bd c8 77 a5 d1 68 bd cf WASM值: 65 fe 03 e5 fe ff 02 db 00 01 7c ff 02 8b 00 01 正 常 值: 65 ce 83 e5 ce 6f 22 db e0 91 7c 5f 22 8b e0 01 这里发现,部分字节经过翻转加密之后得出的结果和正常结果不一致 对源码进行下断点调试,发现第一个BUG 这里汇编的大概意思是,取 var15 和 -4 进行比较,如果 var15 \u003c -4 的话就跳转label14 但是在对照解释器时发现,两个值都被转成无符号int32进行比较: case I32LtS: c = (uint32_t) a \u003c (uint32_t) b; break; 在无符号int32中, -4 会被转成 0xFFFFFFFC (4294967292),然后 var15 就会恒小于 0xFFFFFFFC的,这里显然是不合理的,所以这里应该改为有符号的比较 case I32LtS: c = (int32_t)a \u003c (int32_t)b; break; 查找字节转换失败的原因 因为VMP解释器中流转非常复杂,进行断点调试难度还是比较大的,所以我这边采用使用lldbtrace先把大概的流程trace出来 在trace之前需要先确定一下 dvChr 的内存地址,这样比较容易定位一些 (lldb) p/x dvChr (uint64_t) $16 = 0x0000000282634000 然后就可以打开trace,本来等待程序自己运行结束 但是运行了3小时,才产生了4w+行的日志,真机trace效率较低 感觉自己需要的部分应该差不多有了就结束了trace 分析trace日志 首先搜索 dvChr 的内存地址进行一个基本的定位 发现结果才40条,不符合预期 因为这个加密函数是按位操作的,尝试内存位去掉一位,搜索 28263400 这次有316条,基本接近了 简单分析一下日志,0x10026f274 这里是对内存赋值,也就是生成结果的位置 WASM值: 65 fe 03 e5 fe ff 02 db 00 01 7c ff 02 8b 00 01 符合我们的生成预期 因为第二个字节 9c =\u003e ce 时出错了, 转成 9c =\u003e fe,我们需要查看 282634001 的 0xfffffffe 是怎么生成的 尝试搜索 0xfffffffe 查看生成位置 定位到 0xfffffffe = 0xfffffff9 + 0x00000005,符合预期 继续向上查找 0xfffffff9 是怎么生成 这里可以看出 0xfffffff9 = 0xfffff9c0 | 0x0ffffff9 但是我们正常的运行逻辑应该是 0xc9 = 0xc0 | 0x09 继续查找 0x0ffffff9 的生成,最终定位在 错误原因:ldrsb（功能不变指令变为带符号8位）,所以在高位自动补了0xffffff 对应代码里的位置为 case I32Load8U: stack[m-\u003esp].value.int32 = *(int8_t*)maddr; stack[m-\u003esp].value_type = I32; break; 这里做一下修改 case I32Load8U: stack[m-\u003esp].value.int32 = (*(int8_t*)maddr) \u0026 0xff; stack[m-\u003esp].value_type = I32; break; 对应的汇编指令 ldrb(功能不变，指令变为8位) 这样子就恢复正常,解决了问题 ","date":"2022-01-02","objectID":"/%E4%BD%BF%E7%94%A8-lldbtrace-%E8%BF%98%E5%8E%9F%E7%AE%97%E6%B3%95/:0:1","tags":null,"title":"使用 LLDBTrace 还原算法","uri":"/%E4%BD%BF%E7%94%A8-lldbtrace-%E8%BF%98%E5%8E%9F%E7%AE%97%E6%B3%95/"},{"categories":null,"content":"还原阿里WAF算法 appkey: j0m4PjXNgOX_A_ZJXjBNgJ0DRtp_VQWwEMS5DkAJUJsKPR-0r8PqOkWMrhwymjZCoyOzBW2aqkrY8Tw9Cbwyl9fMOlOMPTC7_sOho2t_mOpdhkcQrWAc8fv_EATLX5DSrlve4QlMpMZtIuTfry6bm9BLY-_E9b9Kwmha6fZHAZY= =\u003e 52cce52117575f24|14b8_d5bdfc94-fd29-4d22-8eef-c9b4af7b2db7|d330_c4857e5e-0b88-42de-9782-813d43b7cd56|m.yundun.waf.1|0002 由hook得知AES的key和iv,从trace日志中查找生成算法 key = bytes.fromhex('42 36 03 c1 b2 8a b2 3a b7 53 25 97 87 12 5b 85') iv = bytes.fromhex('31 33 61 66 75 74 74 94 b5 16 1f 92 2d 47 9c b1') KEY的生成 尝试搜索 423603c1 发现 0x423603c1b28ab23ab753259787125b85 = 0x512510d2a199a129a440368494014896 ^ 0x13131313131313131313131313131313 由hook得知 0x512510d2a199a129a440368494014896 = MD5(d5bdfc94-fd29-4d22-8eef-c9b4af7b2db7) 查找 0x13131313131313131313131313131313 的生成 dup用于把一个相同值赋值若干次 查找 w8 : 0x00000013 的生成 0x00000013 = 0x0000000d + 0x00000006 0x0000000d 和 0x00000006 是 0xfffffe6d 个位和十位 查找 w8 : 0xfffffe6d 的生成 0xfffffe6d = 0xffffff96 + 0xfffffed7 0xfffffed7 = 0x00000048 + 0xfffffe8f 0xfffffe8f = 0x00000001 + 0xfffffe8e 0xfffffe8e = 0xffffff94 + 0xfffffefa 0xfffffefa = 0xffffff84 + 0xffffff76 .... 发现是一个循环相加, 仔细看可以知道是 0x512510d2a199a129a440368494014896 的循环相加 写个简单的代码验证一下 bytearray = bytes.fromhex('512510d2a199a129a440368494014896') ret = 0 for key in bytearray: ret += int(key) print(hex(ret)) ==\u003e 0x66d 尾数 0x6d 符合预期 IV 的生成 iv = bytes.fromhex('31 33 61 66 75 74 74 94 b5 16 1f 92 2d 47 9c b1') 直接搜索 31336166 没有结果 顺位搜索后面四个字节 75747494 0x33616675747494b50000000000000000 = 0x32636365353231310000000000000000 ^ 0x010205104146a5840000000000000000 可得 0x010205104146a5840000000000000000 为固定值 ","date":"2022-01-02","objectID":"/%E4%BD%BF%E7%94%A8-lldbtrace-%E8%BF%98%E5%8E%9F%E7%AE%97%E6%B3%95/:0:2","tags":null,"title":"使用 LLDBTrace 还原算法","uri":"/%E4%BD%BF%E7%94%A8-lldbtrace-%E8%BF%98%E5%8E%9F%E7%AE%97%E6%B3%95/"},{"categories":null,"content":"zingfront 逆向笔记 确定参数来源 拼接组装待加密的参数: 2825b4500 0a 0b 69 50 68 6f 6e 65 20 31 33 2e 37 12 12 61 ..iPhone 13.7..a 2825b4510 66 6d 61 2d 73 64 6b 2d 69 2d 76 37 2e 36 39 2e fma-sdk-i-v7.69. 2825b4520 30 c8 01 a4 c5 cd 98 06 18 1e 28 03 30 64 20 00 0.........(.0d . 2825b4530 88 01 00 b8 01 a4 c5 cd 98 06 58 01 60 01 b0 01 ..........X.`... 2825b4540 01 98 01 00 f8 01 da 09 80 02 a0 11 88 02 80 0f ................ 2825b4550 92 02 03 31 2e 30 a0 04 02 f2 02 0d 6d 64 72 2e ...1.0......mdr. 2825b4560 7a 69 6e 67 66 72 6f 6e 74 c8 04 01 00 00 00 00 zingfront....... 数据格式为protobuf { \"0\": [ 0, 0 ], \"1\": \"iPhone 13.7\", \"2\": { \"12\": 7380662212167495000, \"13\": 3275866450576355000 ///解析错误 应该为:afma-sdk-i-v7.69.0 }, \"3\": 55, \"4\": 1, \"5\": 3, \"6\": 100, \"11\": 1, \"12\": 1, \"17\": 1, \"19\": 0, \"22\": 1, \"23\": 1662274211, \"25\": 1662274211, \"31\": 1242, \"32\": 2208, \"33\": 1920, \"34\": \"1.0\", \"46\": \"mdr.zingfront\", \"68\": 2, \"73\": 1 } ggi_ged 0x9C724 加密入口 入参: call:,RewardedVideoExample,0x9c724========================== ,arg0: 0 1 2 3 4 5 6 7 8 9 A B C D E F 0123456789ABCDEF 2825b4500 0a 0b 69 50 68 6f 6e 65 20 31 33 2e 37 12 12 61 ..iPhone 13.7..a 2825b4510 66 6d 61 2d 73 64 6b 2d 69 2d 76 37 2e 36 39 2e fma-sdk-i-v7.69. 2825b4520 30 c8 01 a4 c5 cd 98 06 18 1e 28 03 30 64 20 00 0.........(.0d . 2825b4530 88 01 00 b8 01 a4 c5 cd 98 06 58 01 60 01 b0 01 ..........X.`... 2825b4540 01 98 01 00 f8 01 da 09 80 02 a0 11 88 02 80 0f ................ 2825b4550 92 02 03 31 2e 30 a0 04 02 f2 02 0d 6d 64 72 2e ...1.0......mdr. 2825b4560 7a 69 6e 67 66 72 6f 6e 74 c8 04 01 00 00 00 00 zingfront....... ,arg1:0x6c ,arg2:0x0 出参: retval:fBiZAnYYId0YBTGaOa9sY4-Zqb-YQz-icux8Ra6G_b8aNrUnRDEMgJq5OXqDShD5QibOsQp-c345cXRoG9XhhpQoU8FDfMFU71lpYMyeWSHwBTHA_JMpAn7eJfy90A1RG7LFgTQSE_Iqxnm2f-cUS2IRFZC-D7ipMe-MFJR-69UA4pAKAdp_eSDGXM_VJeJ8_TkocFTwWzpeIHPvMRPv9S8opMBouDlBxLmQXszBX25Ci9k5LrJMvqUb3k_Satc-qv2itlVvyHgfD52MSNii0aTNQSb57Wt_x_KToBXPX84CBUxmJPigxe5BUVUNd6SKtZjZ6sUHKkkrgS7ViZQK5g 加密流程 开头插入字节码长度 0x6C ,字节码结束的位置补齐随机数到0xF0 283b554a0 6c 0a 0b 69 50 68 6f 6e 65 20 31 33 2e 37 12 12 l..iPhone 13.7.. 283b554b0 61 66 6d 61 2d 73 64 6b 2d 69 2d 76 37 2e 36 39 afma-sdk-i-v7.69 283b554c0 2e 30 c8 01 f9 c9 d0 98 06 18 11 28 03 30 64 20 .0.........(.0d 283b554d0 00 88 01 00 b8 01 f9 c9 d0 98 06 58 01 60 01 b0 ...........X.`.. 283b554e0 01 01 98 01 00 f8 01 da 09 80 02 a0 11 88 02 80 ................ 283b554f0 0f 92 02 03 31 2e 30 a0 04 02 f2 02 0d 6d 64 72 ....1.0......mdr 283b55500 2e 7a 69 6e 67 66 72 6f 6e 74 c8 04 01 55 64 81 .zingfront...Ud. 283b55510 d8 e9 2e ab d6 68 93 f4 c8 2c 50 76 a0 8f 63 1f .....h...,Pv..c. 283b55520 66 83 42 9f 31 4a 6e 78 07 48 1f 4d 50 2e a6 95 f.B.1Jnx.H.MP... 283b55530 5f 13 c7 75 79 d0 f4 70 97 d8 78 d4 05 3e 68 63 _..uy..p..x..\u003ehc 283b55540 54 d4 59 9d 9b b4 a7 be 48 1e 8b 6a e2 62 81 ec T.Y.....H..j.b.. 283b55550 58 77 09 97 1e 79 54 a5 04 07 f9 2d e2 24 02 e3 Xw...yT....-.$.. 283b55560 a9 e1 85 2a 5f e5 ec 01 5a 63 3c 73 2c 61 65 df ...*_...Zc\u003cs,ae. 283b55570 76 37 6b c3 60 2f 02 69 70 60 26 87 f2 62 30 af v7k.`/.ip`\u0026..b0. 283b55580 02 30 80 d4 80 32 bc 3c 04 47 eb 00 09 82 a4 2f .0...2.\u003c.G...../ 整体做 MD5 结果16个字节插入字节码起始位置 283883000 1c cd 55 06 5d 1a 23 5b f2 f6 96 3c 2c fc 42 c6 ..U.].#[...\u003c,.B. 283883010 6c 0a 0b 69 50 68 6f 6e 65 20 31 33 2e 37 12 12 l..iPhone 13.7.. 283883020 61 66 6d 61 2d 73 64 6b 2d 69 2d 76 37 2e 36 39 afma-sdk-i-v7.69 283883030 2e 30 c8 01 bd d3 cd 98 06 18 1d 28 03 30 64 20 .0.........(.0d 283883040 00 88 01 00 b8 01 bd d3 cd 98 06 58 01 60 01 b0 ...........X.`.. 283883050 01 01 98 01 00 f8 01 da 09 80 02 a0 11 88 02 80 ................ 283883060 0f 92 02 03 31 2e 30 a0 04 02 f2 02 0d 6d 64 72 ....1.0......mdr 283883070 2e 7a 69 6e 67 66 72 6f 6e 74 c8 04 01 38 0e c9 .zingfront...8.. 283883080 9f 0a bf 08 f2 5b 25 c8 63 bb 5a a4 93 22 f9 eb .....[%.c.Z..\".. 283883090 37 f1 6f 3e 23 35 22 e0 43 5a d2 60 4c 57 dc e4 7.o\u003e#5\".CZ.`LW.. 2838830a0 f7 67 05 61 f4 98 aa 82 0f 80 64 9a 7d 1c 88 b4 .g.a......d.}... 2838830b0 df 3b 65 78 f4 71 53 43 ","date":"0001-01-01","objectID":"/zingfront-%E9%80%86%E5%90%91/:0:0","tags":null,"title":"","uri":"/zingfront-%E9%80%86%E5%90%91/"}]